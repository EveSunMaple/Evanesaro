---
interface Props {
  headings: { depth: number; slug: string; text: string }[];
}

const { headings } = Astro.props;
---

<div
  class="toc-container sticky top-24 transition-all duration-300 hover:opacity-100 opacity-70"
>
  <div class="bg-base-200 rounded-lg p-4 max-h-[calc(100vh-8rem)] overflow-y-auto">
    <h2 class="text-lg font-semibold mb-4">Table of Contents</h2>
    <nav class="toc">
      <ul class="space-y-2">
        {
          headings.map((heading) => (
            <li
              class={`${
                heading.depth === 2 ? 'ml-0' : 'ml-4'
              } hover:text-primary transition-colors duration-200`}
            >
              <a
                href={`#${heading.slug}`}
                class="block py-1 text-sm toc-item"
                data-heading={heading.slug}
              >
                {heading.text}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
  </div>
</div>

<script>
  let observer: IntersectionObserver;
  let activeHeading: string | null = null;
  
  function updateToc() {
    const headings = Array.from(document.querySelectorAll('h2, h3, h4, h5, h6'));
    const tocItems = document.querySelectorAll('.toc-item');
    
    if (observer) {
      observer.disconnect();
    }
    
    observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.getAttribute('id');
          const tocItem = document.querySelector(`[data-heading="${id}"]`);
          
          if (tocItem) {
            if (entry.isIntersecting) {
              // Remove active state from previous heading
              if (activeHeading && activeHeading !== id) {
                const prevItem = document.querySelector(`[data-heading="${activeHeading}"]`);
                prevItem?.classList.remove('text-primary', 'font-medium');
              }
              
              // Set new active heading
              activeHeading = id;
              tocItem.classList.add('text-primary', 'font-medium');
            }
          }
        });
      },
      {
        rootMargin: '-100px 0px -66%',
        threshold: [0, 1.0],
      }
    );
    
    headings.forEach((heading) => observer.observe(heading));
  }
  
  // Smooth scroll
  document.addEventListener('DOMContentLoaded', () => {
    updateToc();
    
    const tocLinks = document.querySelectorAll('.toc a');
    tocLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.slice(1);
        const target = document.getElementById(targetId || '');
        
        if (target) {
          // Smooth scroll with offset for fixed header
          const headerOffset = 100;
          const elementPosition = target.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
          
          // Update URL without scrolling
          history.pushState(null, '', `#${targetId}`);
        }
      });
    });
  });
  
  // Update on dynamic content changes
  document.addEventListener('astro:after-swap', updateToc);
</script>

<style>
  .toc-container {
    scrollbar-width: thin;
    scrollbar-color: hsl(var(--bc) / 0.2) transparent;
    position: sticky;
    top: 6rem;
    height: fit-content;
    max-height: calc(100vh - 8rem);
  }
  
  .toc-container::-webkit-scrollbar {
    width: 6px;
  }
  
  .toc-container::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .toc-container::-webkit-scrollbar-thumb {
    background-color: hsl(var(--bc) / 0.2);
    border-radius: 3px;
  }
  
  .toc-container::-webkit-scrollbar-thumb:hover {
    background-color: hsl(var(--bc) / 0.3);
  }

  .toc-item {
    display: block;
    text-decoration: none;
    color: inherit;
    transition: all 0.2s ease-in-out;
  }

  .toc-item:hover {
    transform: translateX(4px);
  }
</style>